dataset <- read.csv("C:/users/Delaxshana/OneDrive/Desktop/CAR DETAILS FROM CAR DEKHO.csv")
head(dataset,3)

# Viewing the first few rows of data set
colnames(dataset) <- paste(colnames(dataset),"JDG",sep="_")
head(dataset,3)

str(dataset)

dataset$name_JDG = as.factor(dataset$name_JDG)
dataset$fuel_JDG= as.factor(dataset$fuel_JDG)
dataset$seller_type_JDG= as.factor(dataset$seller_type_JDG)
dataset$transmission_JDG= as.factor(dataset$transmission_JDG)
dataset$owner_JDG= as.factor(dataset$owner_JDG)
str(dataset)

dataset[dataset == ""]
dataset[dataset == ""] <- NA
ratio = sum(is.na(dataset))/nrow(dataset)
ratio

dataset <- unique(dataset)
str(dataset)

# Boxplots can be plotted only for numerical data
boxplot(dataset$year, horizontal=TRUE, pch=20,main = "Year Range",col="Orange")
boxplot(dataset$km_driven, horizontal=TRUE, pch=20,main = "Kilometers Driven Range",col="Pink")
boxplot(dataset$selling_price, horizontal=TRUE, pch=20, main = "Selling Price Range",col="Maroon")


densityplot( ~ dataset$km_driven, pch=6)
densityplot( ~ dataset$selling_price, pch=6)
densityplot( ~ dataset$year, pch=6)

plot(dataset$km_driven_JDG,dataset$selling_price_JDG, main='Hunting Hiding outliers',pch=20)
plot(dataset$year_JDG,dataset$selling_price_JDG, main='Hunting Hiding outliers',pch=20)

barplot(table(dataset$name_JDG ), cex.names=.75,col="lightgreen",las=2,main="Vehicle_Name")
barplot(table(dataset$fuel_JDG ), cex.names=.75,col="pink",main="Fuel_Type")
barplot(table(dataset$seller_type_JDG ), cex.names=.75,col="orange",main="Seller_Type")
barplot(table(dataset$transmission_JDG ), cex.names=.75,col="violet",main ="Transmission_Type" )
barplot(table(dataset$owner_JDG ), cex.names=.75,col="lightblue",main="Owner")

## removing vehicle name
dataset <- dataset[,-c(1)]
str(dataset)

dataset <- dataset[dataset$year_JDG > 1999,]
str(dataset)

library(pastecs)
summary_df <- stat.desc(dataset)
summary_df

# year_JDG has very low coefficient of variation, which indicates minimal internal variation, and so it can be removed.

library(dplyr)
corr = cor(select(dataset,year_JDG,selling_price_JDG,km_driven_JDG,Number_of_years),method="pearson")
corr

FitStart = lm(selling_price_JDG ~ 1, data=dataset) # lm developed using one feature

FitAll = lm(selling_price_JDG ~., data=dataset) #lm developed using all features


summary(FitAll)

summary(FitStart)

step(FitStart,direction = "forward", scope=formula(FitAll))

step(FitAll,direction = "backward")

table(dataset$year_JDG)

Number_of_years <- as.integer(format(Sys.Date(), "%Y")) - dataset$year_JDG
# Number_of_years

dataset$Number_of_years <- Number_of_years
str(dataset)

densityplot( ~ dataset$km_driven, pch=6)
densityplot( ~ dataset$selling_price, pch=6)
densityplot( ~ dataset$year_JDG, pch=6)

if(!require(rcompanion)){install.packages("rcompanion")}
library("rcompanion")#Q-Q plot
if(!require(psych)){install.packages("psych")}
library("psych")

### Tukey's Ladder for selling Price
selling_price_JDG = transformTukey(dataset$selling_price_JDG,plotit=TRUE)
plotNormalHistogram(selling_price_JDG)

# Calculate the minimum and maximum values
min_value <- min(dataset$selling_price_JDG)
max_value <- max(dataset$selling_price_JDG)

# Perform Min-Max scaling
dataset$selling_price_JDG <- (dataset$selling_price_JDG - min_value) / (max_value - min_value)

plotNormalHistogram(dataset$selling_price_JDG)

qqnorm(dataset$selling_price_JDG) #the result shows it is not normal distributed.
qqline(dataset$selling_price_JDG,col="blue")

m=length(dataset$selling_price_JDG)
cat("Dataset size: ",m)

set.seed(456) 
train_index=sample(m,m*0.8)
train_set <- dataset[train_index, ]
number_train_set <- length(train_set$year_JDG)
cat("\nNumber of train set: ",number_train_set)
test_set <-dataset[-train_index,]
number_test_set <- length(test_set$year_JDG)
cat("\nNumber of test set: ",number_test_set)

set.seed(456)

#  cross-validation and K=10 
train_control <- trainControl(method = "cv", number = 10)

# training the model by selling price
model_cv1 <- train(selling_price_JDG ~., data = dataset,
               method = "lm",
               trControl = train_control)

#print model performance metrix
print(model_cv1)

 # with repeatition

set.seed(456)
# cross-validation and K=10 and repeated
train_control <- trainControl(method = "repeatedcv", number = 10, repeats=10)

# training the model by selling price
model_cv2 <- train(selling_price_JDG ~., data = dataset,
                  method = "lm",
                  trControl = train_control)

# printing model performance metrics
print(model_cv2)

wilcox.test(train_set$year_JDG, test_set$year_JDG)
wilcox.test(train_set$selling_price_JDG, test_set$selling_price_JDG)
wilcox.test(train_set$km_driven_JDG, test_set$km_driven_JDG)
#wilcox.test(train_set$Number_of_years, test_set$Number_of_years)

start_time_mlr <- Sys.time()
mlr_model = lm( selling_price_JDG ~ ., data=train_set, na.action=na.omit)  
end_time_mlr <- Sys.time()
mlr_Time <- end_time_mlr - start_time_mlr
cat("Time taken to train the model is ",mlr_Time)

print("Model Decsription:")
summary(mlr_model)

par(mfrow = c(2, 2)) 
plot(mlr_model)

pred <- predict(mlr_model, newdata=train_set)
RMSE_trn_full <- sqrt(mean((train_set$selling_price_JDG - pred)^2))
cat("RMSE value of train set: ",round(RMSE_trn_full,2))


pred <- predict(mlr_model, newdata=test_set)
RMSE_trn_full <- sqrt(mean((test_set$selling_price_JDG - pred)^2))
cat("RMSE value of test set: ",round(RMSE_trn_full,2))

set.seed(456)
# defining training control as cross-validation and K=10 
train_control <- trainControl(method = "cv", number = 10)

# training the model by assigning sales column
# as target variable and rest other column as independent variable
model_cv <- train(selling_price_JDG ~., data = dataset,
               method = "lm",
               trControl = train_control)

# printing model performance metrics
# along with other details


set.seed(456)
# defining training control as cross-validation and K=10 
train_control <- trainControl(method = "repeatedcv", number = 10, repeats=10)

# training the model by assigning sales column
# as target variable and rest other column as independent variable
model_cv2 <- train(selling_price_JDG ~., data = dataset,
                  method = "lm",
                  trControl = train_control)

# printing model performance metrics
# along with other details
print(model_cv2)


print(model_cv)


#install.packages("e1071")
library(e1071)


start_time_svr <- Sys.time()
svr_model <- svm(selling_price_JDG ~ ., data = train_set, type = 'eps-regression', na.action = na.omit)
end_time_svr <- Sys.time()
svr_Time <- end_time_svr - start_time_svr
cat("Time taken to train the SVR model is ",svr_Time)

summary(svr_model)

pred <- predict(svr_model, newdata=train_set)
RMSE_trn_full <- sqrt(mean((train_set$selling_price_JDG - pred)^2))
cat("RMSE value of train_set",round(RMSE_trn_full,2))


pred <- predict(svr_model, newdata=test_set)
RMSE_trn_full <- sqrt(mean((test_set$selling_price_JDG - pred)^2))
cat("RMSE value of test_set",round(RMSE_trn_full,2))


library(randomForest)

start_time_rf <- Sys.time()
rf_model <- randomForest(selling_price_JDG ~ ., data = train_set, na.action = na.roughfix)
end_time_rf <- Sys.time()
rf_Time <- end_time_rf - start_time_rf
cat("Time taken to train the RF model is ",rf_Time)
summary(rf_model)

pred <- predict(rf_model, newdata=train_set)
RMSE_trn_full <- sqrt(mean((train_set$selling_price_JDG - pred)^2))
cat("RMSE value of train_set",round(RMSE_trn_full,2))

pred <- predict(rf_model, newdata=test_set)
RMSE_trn_full <- sqrt(mean((test_set$selling_price_JDG - pred)^2))
cat("RMSE value of test_set",round(RMSE_trn_full,2))











